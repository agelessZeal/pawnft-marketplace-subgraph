type PaymentCurrency @entity {
  id: ID!
  acceptable: Boolean
}

type Bid @entity {
  id: ID!
  itemId: Item!
  bidder: Bytes!
  isActive: Boolean
  amount: BigInt!
  blockTimestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type Item @entity {
  id: ID!
  collection: Bytes!
  tokenId: BigInt!
  mintable: Boolean!
  creator: Bytes!
  uri: String
  count: BigInt!
  totalCount: BigInt!
  price: BigInt!
  currency: Bytes!
  auctionable: Boolean!
  startTime: BigInt!
  endTime: BigInt!
  isSold: Boolean!
  requiredAKA: BigInt!
  bids: [Bid!] @derivedFrom(field: "itemId")
  blockTimestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type Token @entity {
  id: ID!
  itemId: ID!
  owner: Owner
  uri: String
  transfers: [Transfer!]! @derivedFrom(field: "token")
  contract: Contract
}

type Owner @entity {
  id: ID!
  ownedTokens: [Token!]! @derivedFrom(field: "owner")
  balance: BigInt
}

type Contract @entity {
  id: ID!
  name: String
  symbol: String
  mintedTokens: [Token!]! @derivedFrom(field: "contract")
}

type Transfer @entity {
  id: ID!
  token: Token!
  # Empty from is minting
  from: Owner
  # Empty to is burning
  to: Owner
  timestamp: BigInt!
  block: BigInt!
  transactionHash: String!
}